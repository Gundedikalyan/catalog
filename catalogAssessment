import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

class Point {
    int x;
    BigInteger y;

    Point(int x, BigInteger y) {
        this.x = x;
        this.y = y;
    }
}

class Root {
    String base;
    String value;
}

class Input {
    Map<String, Object> keys;
    Map<String, Root> roots;
}

public class ShamirSecretSharing {

    private static BigInteger decodeValue(String value, String base) {
        return new BigInteger(value, Integer.parseInt(base));
    }

    private static BigInteger lagrangeInterpolation(Point[] points, int k) {
        BigInteger secret = BigInteger.ZERO;
        BigInteger prime = BigInteger.valueOf(257); // Using a prime number larger than 256

        for (int i = 0; i < k; i++) {
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    numerator = numerator.multiply(BigInteger.valueOf(-points[j].x)).mod(prime);
                    denominator = denominator.multiply(BigInteger.valueOf(points[i].x - points[j].x)).mod(prime);
                }
            }

            BigInteger lagrangeTerm = points[i].y.multiply(numerator).multiply(denominator.modInverse(prime)).mod(prime);
            secret = secret.add(lagrangeTerm).mod(prime);
        }

        return secret;
    }

    public static void main(String[] args) {
        Gson gson = new Gson();

        try {
            // Read the first test case
            Input input1 = gson.fromJson(new FileReader("testcase1.json"), Input.class);
            processTestCase(input1, "Test Case 1");

            // Read the second test case
            Input input2 = gson.fromJson(new FileReader("testcase2.json"), Input.class);
            processTestCase(input2, "Test Case 2");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void processTestCase(Input input, String testCaseName) {
        int n = ((Double) input.keys.get("n")).intValue();
        int k = ((Double) input.keys.get("k")).intValue();

        Point[] points = new Point[n];
        int index = 0;

        for (Map.Entry<String, Root> entry : input.roots.entrySet()) {
            int x = Integer.parseInt(entry.getKey());
            Root root = entry.getValue();
            BigInteger y = decodeValue(root.value, root.base);
            points[index++] = new Point(x, y);
        }

        BigInteger secret = lagrangeInterpolation(points, k);
        System.out.println(testCaseName + " Secret: " + secret);
    }
}

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.9</version>
</dependency>
